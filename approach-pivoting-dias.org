#+title:     Approach - Pivoting Dais
#+author:    Logan Barnett-Hoy
#+email:     logustus@gmail.com
#+date:      <2021-08-16 Mon>
#+language:  en
#+file_tags:
#+tags:

* Approach - Pivoting Dais
:PROPERTIES:
:header-args: :output-dir ./images/ :file-ext png
:END:
In this approach, the dais pivots around two central axes.

Rotating the dais along its Y axis should be a relatively easy feat to
accomplish, so that design will be saved for last. The challenging part of the
design is the X axis rotation. Similarly, the chassis will follow after the
mechanical parts are done.

** Sinusoidal X Axis Rotation

*** Sinusoidal Paint Coverage

If we can create a sinusoidal motion along the X axis, we could paint the entire
model without needing to have electronics that reverse, start and stop, etc. It
can all be continuous motion.

Imagine a box model to paint. If we could unfold and flatten the model, we'd end
up with a shape like this:

#+name: box-unfolded
#+begin_src scad :noweb yes :cmdline --projection=o --camera=0,0,100,20,0,0 :exports both
<<box-unfold>>

boxUnfold();
#+end_src

#+RESULTS: box-unfolded
[[file:./images/box-unfolded.png]]

If, while the dais rotates along its Z axis, an X axis sinusoidal rotation is
done, we could trace a path along it roughly as below. For our purposes we are
not painting the bottom. The top will be covered by a larger magnitude of the
wave, but it is difficult to show that in this example.

#+name: box-unfolded-painted-01
#+begin_src scad :noweb yes :cmdline --projection=o --camera=0,0,100,20,0,0 :exports both
<<box-unfold>>
<<wave>>

boxUnfold();
wave();
#+end_src

#+RESULTS: box-unfolded-painted-01
[[file:./images/box-unfolded-painted-01.png]]

Notice the bottom of 1 and 2 aren't covered, and neither are the tops of 5
and 6. If we have additional, full X rotations, extend the wave length, and
reduce the frequency a small amount, we should get coverage by virtue of
looping.

In the example below, this is one path the model would be painted in as it loops
over

#+name: box-unfolded-painted-02
#+begin_src scad :noweb yes :cmdline --projection=o --camera=0,0,300,40,0,0 :exports both
<<box-unfold>>
<<wave>>

translate([0, 40, 0]) {
  boxUnfold();
  translate([0, -40, 0])
    boxUnfold();
  translate([0, -80, 0])
    boxUnfold();
  waveLength=1.0 / 15.0;
  degrees = 2000;
  wave(length=waveLength, degrees=degrees);
}
#+end_src

#+RESULTS: box-unfolded-painted-02
[[file:./images/box-unfolded-painted-02.png]]

The below example is similar but overlaps the lines rather than laying out a
loop. The action is the same, but visualized differently. The red, blue, and
green lines are the same path but represent a loop between the 1 and 6 faces, or
a lap around the entire cube. Red is before the loop, blue is the first loop,
and green is the second lap.

#+begin_src scad :noweb yes :cmdline --projection=o --camera=0,0,100,20,0,0 :exports both
<<box-unfold>>
<<wave>>

boxUnfold();
waveLength=1.0 / 15.0;
degrees = 720;
wave(length=waveLength, degrees=degrees);
wave(length=waveLength, degrees=degrees, offset=90, c="blue");
wave(length=waveLength, degrees=degrees, offset=180, c="green");
#+end_src

#+RESULTS:
[[file:./images/box-unfolded-painted-03.png]]

This approach means that there will be over-paint applied in some places. Maybe
we can design around that, or adjust our sine wave such that the loops provide
even coverage. Or maybe it just isn't a big deal. Something to be mindful of.

We can also use a really long wrap, which ensures even coverage but requires we
reset everything once painting is done.

#+name: box-unfolded-painted-04
#+begin_src scad :noweb yes :cmdline --projection=o --camera=0,0,300,40,0,0 :exports both
<<box-unfold>>
<<line>>

translate([0, 40, 0]) {
  boxUnfold();
  translate([0, -40, 0])
    boxUnfold();
  translate([0, -80, 0])
    boxUnfold();
  color("red") {
    for(i=[0:1:2])
      line([3*(i+1)+20, 20, 1], [3*i+20, -100, 1], diameter=0.5);
  }
}
#+end_src

#+RESULTS: box-unfolded-painted-04
[[file:./images/box-unfolded-painted-04.png]]

With the looped version looking like this:


#+name: box-unfolded-painted-05
#+begin_src scad :noweb yes :cmdline --projection=o --camera=0,0,100,20,0,0 :exports both
<<box-unfold>>
<<line>>

translate([0, 40, 0]) {
  boxUnfold();
  colors = ["red", "green", "blue"];
    for(i=[0:1:2])
      color(colors[i])
        line([3*(i+1)+20, 20, 1], [3*i+20, -100, 1], diameter=0.5);
}
#+end_src

#+RESULTS: box-unfolded-painted-05
[[file:./images/box-unfolded-painted-05.png]]
*** Machinery Required

The number of loops we do around the model depends upon the model size.

** Basic Utilities
We need some basic utilities to help out our diagrams and examples.
**** Line
We need to be able to draw a line. From [[https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Tips_and_Tricks#Drawing_%22lines%22_in_OpenSCAD][drawing-lines-in-openscad]]:

#+name: line
#+begin_src scad :results none
// An application of the minimum rotation
// Given to points p0 and p1, draw a thin cylinder with its
// bases at p0 and p1
/* module line(p0, p1, diameter=1) { */
/*   v = p1-p0; */
/*   translate(p0) */
/*     // rotate the cylinder so its z axis is brought to direction v */
/*     multmatrix(rotate_from_to([0,0,1],v)) */
/*     cylinder(d=diameter, h=norm(v), $fn=4); */
/* } */

// This is probably more expensive, but the other one doesn't work well - too
// much spacing is required.
module line(start, end, diameter = 1) {
  hull() {
    translate(start) sphere(diameter);
    translate(end) sphere(diameter);
  }
}
#+end_src

#+name: line-test
#+begin_src scad :noweb yes :cmdline --autocenter :exports both
<<line>>

line([10, 10, 10], [20, 20, 10], diameter=12);
// Generate the polygonal points for the knot path
knot = [ for(i=[0:2:360])
         [ (19*cos(3*i) + 40)*cos(2*i),
           (19*cos(3*i) + 40)*sin(2*i),
            19*sin(3*i) ] ];
// Draw the polygonal a segment at a time
for(i=[1:len(knot)-1])
    line(knot[i-1], knot[i], diameter=5);
#+end_src

#+RESULTS: line-test
[[file:./images/line-test.png]]
**** Face

#+name: face
#+begin_src scad :results none
module face(x, y, side) {
  faceSize = 10;
  translate([x, y, 0]) {
    translate([0, 0, 1]) color("black") text(side);
    square(size = [ faceSize, faceSize ]);
  }
}
#+end_src

**** Box Unfold

#+name: box-unfold
#+begin_src scad :results none :noweb yes
<<face>>
module boxUnfold() {
  rotate([0, 0, -90])
    translate([-20, 20, 0])
    {
      face(0, 0, "1");
      face(10, 0, "2");
      face(10, 10, "3");
      face(10, -10, "4");
      face(20, 0, "5");
      face(30, 0, "6");
    }
}
#+end_src

**** Wave

#+name: wave
#+begin_src scad :results none :noweb yes
<<line>>

module wave(amplitude = 5, length = 0.11, degrees = 360, offset = 0, c = "red") {
  points = [for(i=[0:1:degrees])
      [
        i * length,
        sin(i + offset) * amplitude,
        1,
      ]
  ];

  diameter = 0.5;
  rotate([0, 0, -90])
    translate([-20 + diameter, 20 + amplitude, 0])
    color(c)
      for(i=[1:2:degrees])
        line(points[i-1], points[i], diameter=0.5);
}
#+end_src


* COMMENT settings and notes

Use =--debug=Cam= as an argument to =openscad= to debug camera issues (such as
camera arguments). You'll need to cause a syntax error, but the camera issues
will be printed first.
